generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Club {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  players   Player[]
}

model Player {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  clubId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  club      Club?    @relation(fields: [clubId], references: [id])
  teams1    Team[]   @relation("Player1")
  teams2    Team[]   @relation("Player2")

  @@index([clubId], map: "Player_clubId_fkey")
}

model Team {
  id         Int            @id @default(autoincrement())
  player1Id  Int
  player2Id  Int?
  strengthId Int
  poolId     Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  standings  Standings?
  player1    Player         @relation("Player1", fields: [player1Id], references: [id])
  player2    Player?        @relation("Player2", fields: [player2Id], references: [id])
  pool       Pool           @relation(fields: [poolId], references: [id])
  strength   Strength       @relation(fields: [strengthId], references: [id])
  matches    TeamsInMatch[]

  @@index([player1Id], map: "Team_player1Id_fkey")
  @@index([player2Id], map: "Team_player2Id_fkey")
  @@index([poolId], map: "Team_poolId_fkey")
  @@index([strengthId], map: "Team_strengthId_fkey")
}

model Strength {
  id    Int    @id @default(autoincrement())
  name  String @unique
  pools Pool[]
  teams Team[]
}

model Pool {
  id         Int         @id @default(autoincrement())
  strengthId Int
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  matches    Match[]
  strength   Strength    @relation(fields: [strengthId], references: [id])
  standings  Standings[]
  teams      Team[]

  @@index([strengthId], map: "Pool_strengthId_fkey")
}

model Match {
  id         Int            @id @default(autoincrement())
  poolId     Int
  status     String
  matchDate  DateTime
  courtId    Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  court      Court          @relation(fields: [courtId], references: [id])
  pool       Pool           @relation(fields: [poolId], references: [id])
  setResults SetResult[]
  teams      TeamsInMatch[]

  @@index([courtId], map: "Match_courtId_fkey")
  @@index([poolId], map: "Match_poolId_fkey")
}

model TeamsInMatch {
  id      Int   @id @default(autoincrement())
  matchId Int
  teamId  Int
  match   Match @relation(fields: [matchId], references: [id])
  team    Team  @relation(fields: [teamId], references: [id])

  @@index([matchId], map: "TeamsInMatch_matchId_fkey")
  @@index([teamId], map: "TeamsInMatch_teamId_fkey")
}

model SetResult {
  id         Int   @id @default(autoincrement())
  matchId    Int
  setNumber  Int
  team1Score Int
  team2Score Int
  match      Match @relation(fields: [matchId], references: [id])

  @@index([matchId], map: "SetResult_matchId_fkey")
}

model Standings {
  id            Int  @id @default(autoincrement())
  poolId        Int
  teamId        Int  @unique
  matchesPlayed Int  @default(0)
  wins          Int  @default(0)
  losses        Int  @default(0)
  points        Int  @default(0)
  setsWon       Int  @default(0)
  setsLost      Int  @default(0)
  pool          Pool @relation(fields: [poolId], references: [id])
  team          Team @relation(fields: [teamId], references: [id])

  @@index([poolId], map: "Standings_poolId_fkey")
}

model Court {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  matches Match[]
}
