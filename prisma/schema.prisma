generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Session {
  VM  // Voormiddag
  NM  // Namiddag
}

model Player {
  id            Int              @id @default(autoincrement())
  firstName     String
  lastName      String
  clubId        Int?
  mail          String?           @unique
  phone         String?           @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  club          Club?             @relation(fields: [clubId], references: [id])
  teams1        Team[]            @relation("Player1")
  teams2        Team[]            @relation("Player2")
  playerTournaments PlayerTournament[]  // Relatie met PlayerTournament

  @@index([clubId], map: "idx_player_clubId")
}

model Tournament {
  id            Int              @id @default(autoincrement())
  name          String
  date          String           @db.VarChar(10)
  session       Session
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  poules        Poule[]
  matches       Match[]
  standings     Standing[]
  teams         Team[]
  playerTournaments PlayerTournament[]  // Relatie met PlayerTournament
}

model PlayerTournament {
  id          Int        @id @default(autoincrement())
  playerId    Int
  tournamentId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  player      Player     @relation(fields: [playerId], references: [id])
  tournament  Tournament @relation(fields: [tournamentId], references: [id])

  @@index([playerId], map: "idx_player_tournament_playerId")
  @@index([tournamentId], map: "idx_player_tournament_tournamentId")
}

model Club {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  players   Player[] 
}

model Team {
  id         Int        @id @default(autoincrement())
  tournamentId Int
  player1Id  Int
  player2Id  Int?
  strengthId Int
  pouleId    Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  standings  Standing?
  player1    Player     @relation("Player1", fields: [player1Id], references: [id])
  player2    Player?    @relation("Player2", fields: [player2Id], references: [id])
  poule      Poule?     @relation(fields: [pouleId], references: [id])
  strength   Strength   @relation(fields: [strengthId], references: [id])
  matches    TeamsInMatch[]
  tournament Tournament @relation(fields: [tournamentId], references: [id])

  @@index([player1Id], map: "idx_team_player1Id")
  @@index([player2Id], map: "idx_team_player2Id")
  @@index([pouleId], map: "idx_team_pouleId")
  @@index([strengthId], map: "idx_team_strengthId")
  @@index([tournamentId], map: "idx_team_tournamentId")
}

model Strength {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  poules Poule[] 
  teams  Team[] 
}

model Poule {
  id           Int      @id @default(autoincrement())
  strengthId   Int
  tournamentId Int
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  matches      Match[] 
  strength     Strength @relation(fields: [strengthId], references: [id])
  standings    Standing[]
  teams        Team[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@index([strengthId], map: "idx_poule_strengthId")
  @@index([tournamentId], map: "idx_poule_tournamentId")
}

model Match {
  id           Int      @id @default(autoincrement())
  pouleId      Int
  tournamentId Int
  status       String
  courtId      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  court        Court    @relation(fields: [courtId], references: [id])
  poule        Poule    @relation(fields: [pouleId], references: [id])
  setResults   SetResult[] // Geen onDelete hier
  teams        TeamsInMatch[] // Geen onDelete hier
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@index([courtId], map: "idx_match_courtId")
  @@index([pouleId], map: "idx_match_pouleId")
  @@index([tournamentId], map: "idx_match_tournamentId")
}

model TeamsInMatch {
  id      Int   @id @default(autoincrement())
  matchId Int
  teamId  Int
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade) // onDelete aan de omgekeerde kant
  team    Team  @relation(fields: [teamId], references: [id])

  @@index([matchId], map: "idx_teamsInMatch_matchId")
  @@index([teamId], map: "idx_teamsInMatch_teamId")
}

model SetResult {
  id         Int   @id @default(autoincrement())
  matchId    Int
  setNumber  Int
  team1Score Int
  team2Score Int
  match      Match @relation(fields: [matchId], references: [id], onDelete: Cascade) // onDelete aan de omgekeerde kant
}

model Standing {
  id            Int  @id @default(autoincrement())
  pouleId       Int
  teamId        Int  @unique
  tournamentId  Int
  matchesPlayed Int  @default(0)
  wins          Int  @default(0)
  losses        Int  @default(0)
  points        Int  @default(0)
  setsWon       Int  @default(0)
  setsLost      Int  @default(0)
  poule         Poule @relation(fields: [pouleId], references: [id])
  team          Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tournament    Tournament @relation(fields: [tournamentId], references: [id])

  @@index([pouleId], map: "idx_standings_pouleId")
  @@index([tournamentId], map: "idx_standings_tournamentId")
}

model Court {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  matches Match[] 
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role      Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[] 
}
